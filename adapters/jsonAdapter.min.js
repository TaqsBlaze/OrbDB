// @ts-nocheck
const fs=require("fs").promises,path=require("path"),BaseAdapter=require("./baseAdapter"),{sanitizeInput:sanitizeInput}=require("../utils/sanitizer");class JSONAdapter extends BaseAdapter{constructor(e){super(),this.dbPath=e}async get(e){try{const t=await fs.readFile(this.dbPath,"utf8");return JSON.parse(t).schema[e]||[]}catch(e){throw console.error("Error reading data:",e),e}}async save(e){try{await fs.writeFile(this.dbPath,JSON.stringify(e,null,2))}catch(e){throw console.error("Error saving JSON data:",e),e}}async insert(e,t){try{const a=await fs.readFile(this.dbPath,"utf8"),r=JSON.parse(a);if(!r.schema[e])throw new Error(`Table '${e}' does not exist.`);const s=r.schema[e];!s.length<=0?t.id=s[s.length-1].id+1:t.id=1,console.log(">>>>",r),console.log(">>> INCOMIUNG:",t);const o=sanitizeInput(r.schema,t);console.log(">>> Clean:",o),r.schema[e].push(o),await this.save(r),console.log(`Data successfully inserted into '${e}' table.`)}catch(e){throw console.error("Error writing data:",e),e}}async update(e,t,a){try{const r=await fs.readFile(this.dbPath,"utf8"),s=JSON.parse(r);s.schema[e]=(s.schema[e]||[]).map((e=>e.id===t?{...e,...a}:e)),await this.save(s)}catch(e){throw console.error("Error updating data:",e),e}}async delete(e,t){try{const a=await fs.readFile(this.dbPath,"utf8"),r=JSON.parse(a);r.schema[e]=(r.schema[e]||[]).filter((e=>e.id!==t)),await this.save(r)}catch(e){throw console.error("Error deleting data:",e),e}}async createSchema(e){try{const t={properties:e.properties||{},[e.tableName]:[]};await this.save({schema:t}),console.log("Schema created successfully.")}catch(e){throw console.error("Error creating schema:",e),e}}}module.exports=JSONAdapter;