// @ts-nocheck
import fs from"fs/promises";import path from"path";import BaseAdapter from"./baseAdapter.js";import{sanitizeInput}from"../utils/sanitizer.js";class JSONAdapter extends BaseAdapter{constructor(t){super(),this.dbPath=t}async get(t){try{const a=await fs.readFile(this.dbPath,"utf8");return JSON.parse(a).schema[t]||[]}catch(t){throw console.error("Error reading data:",t),t}}async save(t){try{await fs.writeFile(this.dbPath,JSON.stringify(t,null,2))}catch(t){throw console.error("Error saving JSON data:",t),t}}async insert(t,a){try{const e=await fs.readFile(this.dbPath,"utf8"),r=JSON.parse(e);if(!r.schema[t])throw new Error(`Table '${t}' does not exist.`);const s=r.schema[t];!s.length<=0?a.id=s[s.length-1].id+1:a.id=1,console.log(">>>>",r),console.log(">>> INCOMIUNG:",a);const o=sanitizeInput(r.schema,a);console.log(">>> Clean:",o),r.schema[t].push(o),await this.save(r),console.log(`Data successfully inserted into '${t}' table.`)}catch(t){throw console.error("Error writing data:",t),t}}async update(t,a,e){try{const r=await fs.readFile(this.dbPath,"utf8"),s=JSON.parse(r);s.schema[t]=(s.schema[t]||[]).map((t=>t.id===a?{...t,...e}:t)),await this.save(s)}catch(t){throw console.error("Error updating data:",t),t}}async delete(t,a){try{const e=await fs.readFile(this.dbPath,"utf8"),r=JSON.parse(e);r.schema[t]=(r.schema[t]||[]).filter((t=>t.id!==a)),await this.save(r)}catch(t){throw console.error("Error deleting data:",t),t}}async createSchema(t){try{const a={properties:t.properties||{},[t.tableName]:[]};await this.save({schema:a}),console.log("Schema created successfully.")}catch(t){throw console.error("Error creating schema:",t),t}}}export default JSONAdapter;