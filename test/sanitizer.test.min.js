// @ts-nocheck
import{sanitizeInput}from"../utils/sanitizer.js";describe("sanitizeInput",(()=>{const e={name:"User",fields:{id:{type:"number",required:!0},name:{type:"string",required:!0},age:{type:"number",required:!1,min:0,max:120},email:{type:"string",required:!1,maxLength:50}}};test("should sanitize input data and remove special characters",(()=>{const t=sanitizeInput(e,{id:1,name:"<b>John Doe!@#$</b>",age:30,email:"john.doe@example.com<script>"});expect(t).toEqual({id:1,name:"John Doe",age:30,email:"john.doe@example.com"})})),test("should throw an error for missing required fields",(()=>{const t={name:"John Doe"};expect((()=>sanitizeInput(e,t))).toThrow("Field 'id' is required.")})),test("should skip undefined optional fields",(()=>{const t=sanitizeInput(e,{id:1,name:"John Doe"});expect(t).toEqual({id:1,name:"John Doe"})})),test("should throw an error for invalid types",(()=>{const t={id:"1",name:"John Doe",age:"thirty"};expect((()=>sanitizeInput(e,t))).toThrow("Field 'id' must be of type 'number'.")})),test("should throw an error if a string exceeds maxLength",(()=>{const t={id:1,name:"John Doe",email:"a".repeat(51)};expect((()=>sanitizeInput(e,t))).toThrow("Field 'email' exceeds maximum length of 50.")})),test("should throw an error if a number is out of range",(()=>{const t={id:1,name:"John Doe",age:150};expect((()=>sanitizeInput(e,t))).toThrow("Field 'age' cannot be greater than 120.")})),test("should allow numbers at the minimum boundary",(()=>{const t=sanitizeInput(e,{id:1,name:"John Doe",age:0});expect(t).toEqual({id:1,name:"John Doe",age:0})})),test("should remove all special characters from strings",(()=>{const t=sanitizeInput(e,{id:1,name:"Hello!@#$%^&*()_+<>",email:'<script>alert("test")<\/script>'});expect(t).toEqual({id:1,name:"Hello",email:"alerttest"})}))}));