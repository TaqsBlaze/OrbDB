// @ts-nocheck
import HashUtility from"../utils/hash.js";describe("HashUtility",(()=>{const t="securepassword123",s="wrongpassword";test("hash should return a valid hash string",(()=>{const s=HashUtility.hash(t);expect(typeof s).toBe("string"),expect(s.length).toBeGreaterThan(0)})),test("hash should produce consistent results for the same input",(()=>{const s=HashUtility.hash(t),e=HashUtility.hash(t);expect(s).toBe(e)})),test("hash should produce different results for different inputs",(()=>{const e=HashUtility.hash(t),h=HashUtility.hash(s);expect(e).not.toBe(h)})),test("verify should return true for matching data and hash",(()=>{const s=HashUtility.hash(t),e=HashUtility.verify(t,s);expect(e).toBe(!0)})),test("verify should return false for non-matching data and hash",(()=>{const e=HashUtility.hash(t),h=HashUtility.verify(s,e);expect(h).toBe(!1)})),test("hash should throw an error if data is not a string",(()=>{expect((()=>HashUtility.hash(12345))).toThrow("Data to hash must be a string.")})),test("verify should handle different algorithms correctly",(()=>{const s=HashUtility.hash(t,"sha256"),e=HashUtility.hash(t,"sha512");expect(HashUtility.verify(t,s,"sha256")).toBe(!0),expect(HashUtility.verify(t,e,"sha512")).toBe(!0),expect(HashUtility.verify(t,s,"sha512")).toBe(!1)})),test("verify should return false for empty strings",(()=>{const s=HashUtility.hash(""),e=HashUtility.verify("",s);expect(e).toBe(!0);const h=HashUtility.verify(t,s);expect(h).toBe(!1)}))}));