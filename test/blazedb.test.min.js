// @ts-nocheck
import OrbDB from"../orb.js";import OrbDBSchema from"../schema/schema.js";import fs from"fs/promises";import path from"path";import adapter from"../adapters/jsonAdapter.js";const dbPath=path.join(__dirname,"./db.json"),userModel={name:"User",fields:{id:{type:"number",required:!0},name:{type:"string",required:!0},age:{type:"number",required:!0}}};describe("OrbDB with JSON Adapter",(()=>{let e;beforeAll((async()=>{e=new OrbDB.Json(new adapter(dbPath));const a=new OrbDBSchema(e);a.addModel(userModel),await a.createSchema()})),afterAll((async()=>{})),test("should create a schema",(async()=>{const e=await fs.readFile(dbPath,"utf8"),a=JSON.parse(e);expect(a.schema.properties).toHaveProperty("id"),expect(a.schema.properties).toHaveProperty("name"),expect(a.schema.properties).toHaveProperty("age")})),test("should add a user",(async()=>{await e.insert(userModel.name,{id:1,name:"<b>John Doe</b>./;+=-_",age:30});const a=await fs.readFile(dbPath,"utf8"),t=JSON.parse(a);expect(t.schema[userModel.name]).toContainEqual({id:1,name:"John Doe",age:30})})),test("should update a user",(async()=>{await e.update(userModel.name,1,{name:"Blaze"});const a=(await e.get(userModel.name)).find((e=>1===e.id));expect(a.name).toBe("Blaze")})),test("should delete a user",(async()=>{await e.delete(userModel.name,1);const a=(await e.get(userModel.name)).find((e=>1===e.id));expect(a).toBeUndefined()}))}));